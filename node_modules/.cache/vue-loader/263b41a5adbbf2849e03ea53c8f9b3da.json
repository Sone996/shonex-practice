{"remainingRequest":"/home/nebojsa/shonex-practice/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/nebojsa/shonex-practice/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/nebojsa/shonex-practice/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/nebojsa/shonex-practice/src/components/homeComponents/boxFour.vue?vue&type=template&id=2bf9d967&","dependencies":[{"path":"/home/nebojsa/shonex-practice/src/components/homeComponents/boxFour.vue","mtime":1623321958497},{"path":"/home/nebojsa/shonex-practice/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nebojsa/shonex-practice/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/nebojsa/shonex-practice/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nebojsa/shonex-practice/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF92bS5fbSgwKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgImRpdiIsCiAgICAgIHsKICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICJib3gtZm91ciBmbGV4IGZsZXgtY29sIG1kOmZsZXgtcm93IGp1c3RpZnktY2VudGVyIGl0ZW1zLWNlbnRlciBiZy1ibGFjayB3LWZ1bGwgcHQtMzIiCiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImZsZXggdy1mdWxsIGZsZXgtY29sIG1kOmZsZXgtcm93IG1kOnctOC8xMiIgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmbGV4IGZsZXgtY29sIHctMS8yIiB9LCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC13aGl0ZSB0ZXh0LTN4bCBmb250LWJvbGQgdGV4dC1sZWZ0IG1iLTQiIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJUaGUgQmVzdCBDYXIgSW5zdXJhbmNlIENvbXBhbmllcyBmb3IgMjAyMSIpXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC13aGl0ZSB0ZXh0LXhsIHRleHQtbGVmdCB1bmRlcmxpbmUiIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiV2UgbG9va2VkIGF0IGNsYWltcyBwcm9jZXNzZXMsIHRyYW5zcGFyZW5jeSwgY29tcGxhaW50cyBhbmQgbW9yZSB0byBmaW5kIGFuZCByYW5rIHRoZSBiZXN0IGNhciBpbnN1cmFuY2UgY29tcGFuaWVzLiIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC13aGl0ZSBiZy1vcmFuZ2UgcC0yIHRleHQtbGVmdCBteS00IiB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIk1hbnkgb3IgYWxsIG9mIHRoZSBwcm9kdWN0cyBmZWF0dXJlZCBoZXJlIGFyZSBmcm9tIG91ciBwYXJ0bmVycyB3aG8gY29tcGVuc2F0ZSB1cy4gVGhpcyBtYXkgaW5mbHVlbmNlIHdoaWNoIHByb2R1Y3RzIHdlIHdyaXRlIGFib3V0IGFuZCB3aGVyZSBhbmQgaG93IHRoZSBwcm9kdWN0IGFwcGVhcnMgb24gYSBwYWdlLiBIb3dldmVyLCB0aGlzIGRvZXMgbm90IGluZmx1ZW5jZSBvdXIgZXZhbHVhdGlvbnMuIE91ciBvcGluaW9ucyBhcmUgb3VyIG93bi4iCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInRleHQtd2hpdGUgdGV4dC1sZWZ0IiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICJUaGUgYmVzdCBjYXIgaW5zdXJhbmNlIGNvbXBhbmllcyBnaXZlIHRoZWlyIGN1c3RvbWVycyBtb3JlIHRoYW4ganVzdCBjb3ZlcmFnZSB0aGV5IHdhbnQgYXQgYSByZWFzb25hYmxlIHByaWNlIOKAlCBtZXJlbHkgZ29vZCBjb21wYW5pZXMgY2FuIGRvIHRoYXQuIE9uIHRvcCBvZiB0aGF0LCB0aGUgYmVzdCBhdXRvIGluc3VyYW5jZSBjb21wYW5pZXMgcHJvdmlkZSBhIGN1c3RvbWVyLWZpcnN0IGV4cGVyaWVuY2UgZnJvbSBxdW90ZSB0byBjbGFpbSwgaW5jbHVkaW5nIGEgaGVhZGFjaGUtZnJlZSB3YXkgdG8gbWFuYWdlIHBvbGljaWVzIGFuZCBtYWtlIHBheW1lbnRzLiIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXdoaXRlIHRleHQtbGVmdCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiVGhlIGJlc3QgY2FyIGluc3VyYW5jZSBjb21wYW5pZXMgZ2l2ZSB0aGVpciBjdXN0b21lcnMgbW9yZSB0aGFuIGp1c3QgY292ZXJhZ2UgdGhleSB3YW50IGF0IGEgcmVhc29uYWJsZSBwcmljZSDigJQgbWVyZWx5IGdvb2QgY29tcGFuaWVzIGNhbiBkbyB0aGF0LiBPbiB0b3Agb2YgdGhhdCwgdGhlIGJlc3QgYXV0byBpbnN1cmFuY2UgY29tcGFuaWVzIHByb3ZpZGUgYSBjdXN0b21lci1maXJzdCBleHBlcmllbmNlIGZyb20gcXVvdGUgdG8gY2xhaW0sIGluY2x1ZGluZyBhIGhlYWRhY2hlLWZyZWUgd2F5IHRvIG1hbmFnZSBwb2xpY2llcyBhbmQgbWFrZSBwYXltZW50cy4iCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidGV4dC13aGl0ZSB0ZXh0LWxlZnQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIlRoZSBiZXN0IGNhciBpbnN1cmFuY2UgY29tcGFuaWVzIGdpdmUgdGhlaXIgY3VzdG9tZXJzIG1vcmUgdGhhbiBqdXN0IGNvdmVyYWdlIHRoZXkgd2FudCBhdCBhIHJlYXNvbmFibGUgcHJpY2Ug4oCUIG1lcmVseSBnb29kIGNvbXBhbmllcyBjYW4gZG8gdGhhdC4gT24gdG9wIG9mIHRoYXQsIHRoZSBiZXN0IGF1dG8gaW5zdXJhbmNlIGNvbXBhbmllcyBwcm92aWRlIGEgY3VzdG9tZXItZmlyc3QgZXhwZXJpZW5jZSBmcm9tIHF1b3RlIHRvIGNsYWltLCBpbmNsdWRpbmcgYSBoZWFkYWNoZS1mcmVlIHdheSB0byBtYW5hZ2UgcG9saWNpZXMgYW5kIG1ha2UgcGF5bWVudHMuIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInRleHQtd2hpdGUgdGV4dC1sZWZ0IiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICJUaGUgYmVzdCBjYXIgaW5zdXJhbmNlIGNvbXBhbmllcyBnaXZlIHRoZWlyIGN1c3RvbWVycyBtb3JlIHRoYW4ganVzdCBjb3ZlcmFnZSB0aGV5IHdhbnQgYXQgYSByZWFzb25hYmxlIHByaWNlIOKAlCBtZXJlbHkgZ29vZCBjb21wYW5pZXMgY2FuIGRvIHRoYXQuIE9uIHRvcCBvZiB0aGF0LCB0aGUgYmVzdCBhdXRvIGluc3VyYW5jZSBjb21wYW5pZXMgcHJvdmlkZSBhIGN1c3RvbWVyLWZpcnN0IGV4cGVyaWVuY2UgZnJvbSBxdW90ZSB0byBjbGFpbSwgaW5jbHVkaW5nIGEgaGVhZGFjaGUtZnJlZSB3YXkgdG8gbWFuYWdlIHBvbGljaWVzIGFuZCBtYWtlIHBheW1lbnRzLiIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXdoaXRlIHRleHQtbGVmdCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiVGhlIGJlc3QgY2FyIGluc3VyYW5jZSBjb21wYW5pZXMgZ2l2ZSB0aGVpciBjdXN0b21lcnMgbW9yZSB0aGFuIGp1c3QgY292ZXJhZ2UgdGhleSB3YW50IGF0IGEgcmVhc29uYWJsZSBwcmljZSDigJQgbWVyZWx5IGdvb2QgY29tcGFuaWVzIGNhbiBkbyB0aGF0LiBPbiB0b3Agb2YgdGhhdCwgdGhlIGJlc3QgYXV0byBpbnN1cmFuY2UgY29tcGFuaWVzIHByb3ZpZGUgYSBjdXN0b21lci1maXJzdCBleHBlcmllbmNlIGZyb20gcXVvdGUgdG8gY2xhaW0sIGluY2x1ZGluZyBhIGhlYWRhY2hlLWZyZWUgd2F5IHRvIG1hbmFnZSBwb2xpY2llcyBhbmQgbWFrZSBwYXltZW50cy4iCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidGV4dC13aGl0ZSB0ZXh0LWxlZnQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIlRoZSBiZXN0IGNhciBpbnN1cmFuY2UgY29tcGFuaWVzIGdpdmUgdGhlaXIgY3VzdG9tZXJzIG1vcmUgdGhhbiBqdXN0IGNvdmVyYWdlIHRoZXkgd2FudCBhdCBhIHJlYXNvbmFibGUgcHJpY2Ug4oCUIG1lcmVseSBnb29kIGNvbXBhbmllcyBjYW4gZG8gdGhhdC4gT24gdG9wIG9mIHRoYXQsIHRoZSBiZXN0IGF1dG8gaW5zdXJhbmNlIGNvbXBhbmllcyBwcm92aWRlIGEgY3VzdG9tZXItZmlyc3QgZXhwZXJpZW5jZSBmcm9tIHF1b3RlIHRvIGNsYWltLCBpbmNsdWRpbmcgYSBoZWFkYWNoZS1mcmVlIHdheSB0byBtYW5hZ2UgcG9saWNpZXMgYW5kIG1ha2UgcGF5bWVudHMuIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInRleHQtd2hpdGUgdGV4dC1sZWZ0IiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICJUaGUgYmVzdCBjYXIgaW5zdXJhbmNlIGNvbXBhbmllcyBnaXZlIHRoZWlyIGN1c3RvbWVycyBtb3JlIHRoYW4ganVzdCBjb3ZlcmFnZSB0aGV5IHdhbnQgYXQgYSByZWFzb25hYmxlIHByaWNlIOKAlCBtZXJlbHkgZ29vZCBjb21wYW5pZXMgY2FuIGRvIHRoYXQuIE9uIHRvcCBvZiB0aGF0LCB0aGUgYmVzdCBhdXRvIGluc3VyYW5jZSBjb21wYW5pZXMgcHJvdmlkZSBhIGN1c3RvbWVyLWZpcnN0IGV4cGVyaWVuY2UgZnJvbSBxdW90ZSB0byBjbGFpbSwgaW5jbHVkaW5nIGEgaGVhZGFjaGUtZnJlZSB3YXkgdG8gbWFuYWdlIHBvbGljaWVzIGFuZCBtYWtlIHBheW1lbnRzLiIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXdoaXRlIHRleHQtbGVmdCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiVGhlIGJlc3QgY2FyIGluc3VyYW5jZSBjb21wYW5pZXMgZ2l2ZSB0aGVpciBjdXN0b21lcnMgbW9yZSB0aGFuIGp1c3QgY292ZXJhZ2UgdGhleSB3YW50IGF0IGEgcmVhc29uYWJsZSBwcmljZSDigJQgbWVyZWx5IGdvb2QgY29tcGFuaWVzIGNhbiBkbyB0aGF0LiBPbiB0b3Agb2YgdGhhdCwgdGhlIGJlc3QgYXV0byBpbnN1cmFuY2UgY29tcGFuaWVzIHByb3ZpZGUgYSBjdXN0b21lci1maXJzdCBleHBlcmllbmNlIGZyb20gcXVvdGUgdG8gY2xhaW0sIGluY2x1ZGluZyBhIGhlYWRhY2hlLWZyZWUgd2F5IHRvIG1hbmFnZSBwb2xpY2llcyBhbmQgbWFrZSBwYXltZW50cy4iCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmxleCB3LTEvMiBpbWFnZS1ib3giIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImltZy13cmFwcGVyIG1pbG9zIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltYWdlIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1hZ2VzL2NhcjIuanBlZyIpIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0KICAgICAgICApCiAgICAgIF0KICAgICkKICB9Cl0KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}