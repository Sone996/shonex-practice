{"remainingRequest":"/home/nebojsa/shonex-practice/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/nebojsa/shonex-practice/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/nebojsa/shonex-practice/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/nebojsa/shonex-practice/src/components/shared/Accordion.vue?vue&type=template&id=fb02fde4&","dependencies":[{"path":"/home/nebojsa/shonex-practice/src/components/shared/Accordion.vue","mtime":1623327763805},{"path":"/home/nebojsa/shonex-practice/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nebojsa/shonex-practice/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/nebojsa/shonex-practice/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nebojsa/shonex-practice/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}